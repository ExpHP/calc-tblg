#!/bin/bash

# preprocess-band-yaml
#
# The horrible band.yaml screenscraper.
#
# Even attoparsec and libyaml tremble at the sight of the mighty band.yaml.
# Nobody ever expected a config file format to be used to serialize data
#  on the order of gigabytes.

# This is a fragile-as-glass raw-text preprocessor to extract eigenvectors
#  from band.yaml without any proper parsing/validation of the yaml.
#
# It is known to work with Phonopy v1.11.10.

INPUT=band.yaml
rm -rf script-work
mkdir script-work
cd script-work
ln ../$INPUT .

err() { echo "$(basename "$0"):" "$@" >&2; }
die() { err "$@"; exit 1; }
outdated() {
	err "Sanity-check fail! This script is likely outdated!"
	err "The issue was: $@"
	exit 1
}

if ! [[ $(which rg 2>/dev/null) ]]; then
	grep=egrep
else
	grep=rg
fi
csplit=(csplit --suffix-format="%03d")

worker1() {
	# * strip the header lines for each atom (this in turn "flattens"
	#    the Nx3x2 arrays into 3Nx2 arrays)
	# * split on the first line of each k-point (the key "q-position")
	"${csplit[@]}" -f band.yaml- \
		<($grep -v "# atom" $INPUT) \
		"/^- q-position:/" "{*}" # \
#		|| exit 1

}

worker2() {

	# stdin to this function is from csplit, which outputs a line
	# for each file it writes. Therefore, 'read' effectively
	# blocks until a file exists.
	echo "worker2"

	# first file is just the leading junk
	read dummy
	rm band.yaml-000

	echo abc >&2

	for i in $(seq 1 1 999); do
		read dummy || break # wait for next file to exist

		echo abc >&2

		in=$(printf "band.yaml-%03d" $i)
		out=$(printf "edit.yaml-%03d" $i)

		# EXPECTED APPEARANCE OF band.yaml-001
		cat >/dev/null <<HERE
- q-position: [    0.3838384,    0.0000000,    0.0000000 ]
  distance:    0.0000000
  band:
  - # 1
    frequency:    0.6268507393
    eigenvector:
      - [  0.00000000000000,  0.00000000000000 ]
      - [  0.00000000000000,  0.00000000000000 ]
      - [  0.00000000000000,  0.00000000000000 ]
      - [  0.00000000000000,  0.00000000000000 ]
             .
             .
             .
      - [  0.00000000000000,  0.00000000000000 ]
      - [  0.00000000000000,  0.00000000000000 ]
  - # 2
    frequency:    0.6268507393
    eigenvector:
      - [  0.00000000000000,  0.00000000000000 ]
      - [  0.00000000000000,  0.00000000000000 ]
             .
             .
             .
      - [  0.00000000000000,  0.00000000000000 ]
HERE

		# * limit to just: (grep)
		#    eigenvector items    /^      -/
		#    band headers         /^  - #/
		# * eliminate "," "[" "]" (tr)
		$grep '^(      -|  - \#)' $in \
			| tr -d ",[]" \
			> $out

		# EXPECTED APPEARANCE OF edit.yaml-001-001
		cat >/dev/null <<HERE
  - # 1
      - 0.00000000000000  0.00000000000000 
      - 0.00000000000000  0.00000000000000 
      - 0.00000000000000  0.00000000000000 
             .
             .
             .
      - 0.00000000000000  0.00000000000000 
      - 0.00000000000000  0.00000000000000 
  - # 2
      - 0.00000000000000  0.00000000000000 
      - 0.00000000000000  0.00000000000000 
             .
             .
             .
HERE

		# sanity check on first file
		if [[ $i -eq 1 ]]; then
			{ cat $out | $grep -v "#" \
			           | awk '{print NF;}' \
			           | $grep -v '^3$'; \
			} && outdated "expected all lines without # in $out to have three words"

			[[ $(grep '#' $out) ]] \
			|| outdated "expected lines with # (band separators)"
		fi

		# don't need this any-more
		rm $in
	done
}

# run the two workers concurrently
# (on an SSD like I am using, I don't suspect that either task is IO-bound)
worker1 | tee xyz | worker2

cd ..
rm script-work/$INPUT
ls script-work/ | xargs -n1 -i{} mv script-work/{} .
rm -rf script-work


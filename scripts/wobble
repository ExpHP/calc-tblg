#!/usr/bin/env python3

import numpy as np
import itertools
import yaml
import xyz
import sys

def main():
	import argparse
	parser = argparse.ArgumentParser(description="let's wobble",
		epilog='outputs files delimited by lines with at least 4 equal signs. Use csplit')

	parser.add_argument('INFILE', type=str, help='path to band.yaml')
#	parser.add_argument('band', type=int,
#		help='band index, indexed from 1 (to match the comment labels in band.yaml)')
	parser.add_argument('--bands', type=str, default=None,
		help='comma-separated list of 1-based band indices you are interested in.'
		' (when not specified, does them all)')
	parser.add_argument('--supercell', type=str, default='111',
		help='a 3-digit number of sc dims, or a python list expression.'
		' (WARNING: the argument may be eval\'d!)')
	parser.add_argument('--amplitude', type=float, default=0.2)
	parser.add_argument('--frames', type=int, default=100)

	args = parser.parse_args()

	d = yaml.load(open(args.INFILE))

	all_bands = range(len(d['phonon'][0]['band']))
	if args.bands is None:
		args.bands = list(all_bands)
	else:
		args.bands = [int(s) - 1 for s in args.bands.split(',') if s]
		if -1 in args.bands:
			raise parser.error('bands are indexed from 1!')
		if set(args.bands) - set(all_bands):
			print('WARNING: Requested some bands that do not exist! Ignoring them', file=sys.stderr)
			args.bands = [b for b in args.bands if b in all_bands]

	def parse_supercell(s):
		if len(args.supercell) == 3:
			return tuple(map(int, args.supercell))
		else:
			return eval(args.supercell) # !!!
	args.supercell = parse_supercell(args.supercell)

	lattice = np.array(d['lattice'])
	if 'atoms' in d: # old
		centers_frac = np.array([x['position'] for x in d['atoms']])
	elif 'points' in d:
		centers_frac = np.array([x['coordinates'] for x in d['points']])
	centers_cart = centers_frac.dot(lattice)

	q_frac = d['phonon'][0]['q-position']
	bands = [d['phonon'][0]['band'][i] for i in args.bands]

	def print_band_anim(band):
		re,im = np.transpose(np.array(band['eigenvector']).reshape((-1,2)))
		eigenvector_cart = (re + 1j * im).reshape((-1,3))

		frames = []
		for t in np.linspace(0, 2*np.pi, args.frames, endpoint=False):
			positions = []
			for R_frac in itertools.product(*map(range, args.supercell)):
				R_cart = np.dot(R_frac, lattice)

				image_phase = np.exp(2j * np.pi * np.dot(q_frac, R_frac))
				positions.extend(
					centers_cart  # unit cell location
					+ R_cart      # image displacement
					+ args.amplitude * np.real(
						eigenvector_cart * image_phase * np.exp(-1j * t) # wobble!!
					)
				)
			names = ['C']*len(positions)
			frames.append(xyz.XyzData(names, positions, validate=False))
		xyz.dump_anim(sys.stdout, frames, format_spec='.3f')

	for band in bands:
		print_band_anim(band)
		print('==============')

main()

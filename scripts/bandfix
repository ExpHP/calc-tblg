#!/usr/bin/env python3
import numpy as np
import json
import sys

# this entire script was initially Haskell, so expect some curiosities

def main():
	import argparse
	parser = argparse.ArgumentParser(
		description="reorder band data to account for crossovers that occur outside of high-symmetry points",
		epilog=" Input is a 3D JSON array of frequencies, indexed by:  hsym_line, kpoint, sorted_band_index.")
	parser.add_argument('-m', '--meta', help="write an object with additional metadata")
	args = parser.parse_args()

	data = json.load(sys.stdin)
	(data,perms) = reorder(data)

	if args.meta:
		json.dump({
			# 3D JSON array omega, indexed by:  hsym_line, kpoint, gamma_band_index
			"data": data.tolist(),
			# At each high symmetry point, a permutation that, when applied to the bands
			#  initially in sorted order, sorts the bands by gamma point order.
			# (NOTE: beware that this is a drastic oversimplification, because in reality
			#        bands get mixed and matched at high symmetry points and lose their identity)
			"gamma-perms": perms.tolist(),
			# At each high symmetry point, the gamma-point-sorted index of each band,
			# in order of values at that symmetry point.
			# (NOTE: beware that this is a drastic oversimplification, because in reality
			#        bands get mixed and matched at high symmetry points and lose their identity)
			"gamma-ids": perms.argsort(axis=1).tolist(),
			}, sys.stdout)
	else:
		json.dump(data.tolist(), sys.stdout)

def scanl2(f, first, second, xs):
	for x in xs:
		yield first
		(first, second) = (second, f(first, second, x))

# reorder :: (Num a, Ord a) => Perm -> [[a]] -> ([[a]],[Perm])
def reorder_chunk(xs, init_perm):
	xs = np.array(xs)
	init_perm = np.array(init_perm)
	assert xs.ndim == 2
	assert init_perm.ndim == 1
	assert (xs == np.sort(xs, axis=1)).all()

	def inner():
		def step(first, second, next_in):
			(_, prev_out) = first
			(_, cur_out)  = second
			guess = 2*cur_out - prev_out
			perm = np.argsort(np.argsort(guess))
			next_out = next_in[perm]
			return (perm, next_out)

		init_item = lambda i: (init_perm, xs[i,init_perm])
		return scanl2(step, init_item(0), init_item(1), xs[2:])

	perms, fixeds = zip(*inner())
	return fixeds, perms[-1]

# reorder :: (Num a, Ord a) => [[[a]]] -> ([[[a]]],[Perm])
def reorder(chunks):
	chunks = np.array(chunks)
	assert chunks.ndim == 3
	def inner():
		init_perm = np.arange(chunks.shape[2])
		for chunk in chunks:
			(chunk, final_perm) = reorder_chunk(chunk, init_perm)
			yield (chunk, init_perm)
			init_perm = final_perm
	return map(np.array, zip(*inner()))

main()

#!/usr/bin/env python3

import numpy as np
import itertools

def main():
	import argparse
	import pytoml as toml
	import json
	import sys

	parser = argparse.ArgumentParser()
	parser.add_argument('INPUT', default=['assemble.toml'], nargs='+', help='input file. Format not documented; read the source')
	parser.add_argument('--title', default='Assembled layers', help='title for output file')
	parser.add_argument('--xyz', action='store_true', help='decide that you want an xyz file instead')
	args = parser.parse_args()

	# ---------------------------
	# read params

	OVERWRITE = object()
	APPEND = object()
	MERGE_SPEC = {
		'a': OVERWRITE,
		'layer-sep': OVERWRITE,
		'vacuum-sep': OVERWRITE,
		'layer': APPEND,
	}
	def merge_dict(a, b, spec=MERGE_SPEC, path='root'):
		if spec is OVERWRITE:
			return b
		elif spec is APPEND:
			if a: assert isinstance(a, list)
			if b: assert isinstance(b, list)
			return (a or []) + (b or [])
		else:
			assert isinstance(spec, dict)
			# too lazy right now for nice error messages
			assert isinstance(a, dict)
			assert isinstance(b, dict)
			a = dict(a)
			for k in b:
				if k in a:
					k_path = path + '[{!r}]'.format(k)
					if k not in spec:
						parser.error('no strategy for merging {!r}'.format(k_path))
					a[k] = merge_dict(a[k], b[k], spec[k], k_path)
				else:
					a[k] = b[k]
			return a
	from functools import reduce
	params = reduce(merge_dict, [toml.load(open(s)) for s in args.INPUT])

	# ---------------------------
	# interpret params

	CART_UNITS = object()
	FRAC_UNITS = object()

	def read_params(): # IIFE
		d = dict(params)
		lattice_a = d.pop('a')
		layer_sep = d.pop('layer-sep')
		vacuum_sep = d.pop('vacuum-sep')

		layers = []
		for layer_d in d.pop('layer'):
			cur = {}
			layers.append(cur)

			NO_DEFAULT=object()
			def extract_frac_or_cart(dest_key, fmt, default=None):
				unit_map = {
					fmt.format('frac'): FRAC_UNITS,
					fmt.format('cart'): CART_UNITS,
				}

				present_keys = set([k for k in unit_map if k in layer_d])
				if len(present_keys) > 1:
					raise RuntimeError('layer cannot specify more than one of {!r}'.format(set(unit_map)))
				if default is None and not present_keys:
					raise RuntimeError('each layer must specify one of {!r}'.format(set(unit_map)))

				if present_keys:
					src_key = present_keys.pop()
					cur[dest_key] = (layer_d.pop(src_key), unit_map[src_key])
				elif default: # default must be a tuple of (value, units)
					cur[dest_key] = default
				else: assert False, "internal error"

			# NOTE: - frac-sites are in units of the layer lattice
			#       - frac-lattice is in units of the superlattice
			extract_frac_or_cart('sites', '{}-sites')
			extract_frac_or_cart('lattice', '{}-lattice', default=([[1,0],[0,1]], FRAC_UNITS))
			cur['shift'] = layer_d.pop('shift', [0.,0.])
			cur['repeat'] = layer_d.pop('repeat', [1,1])
			cur['transform'] = layer_d.pop('transform', [[1.,0.],[0.,1.]])
			assert len(cur['shift']) == 2, "'shift' must be a 2-vector"
			assert len(cur['repeat']) == 2, "'repeat' must be a 2-vector of positive integers"
			assert all(isinstance(x, int) and x > 0 for x in cur['repeat']), "'repeat' must be a 2-vector of positive integers"
			assert len(cur['transform']) == 2, "'transform' must be a 2x2 matrix"
			assert all(len(row) == 2 for row in cur['transform']), "'transform' must be a 2x2 matrix"

			if layer_d:
				parser.error('Unknown key in params for layer: {!r}'.format(layer_d.popitem()[0]))

		lattice_c = vacuum_sep + (len(layers) - 1) * layer_sep
		for i,layer in enumerate(layers):
			# evenly space the layers around a given center height
			TARGET_CENTER_Z = 0.5
			layer['frac-z'] = TARGET_CENTER_Z + (i - 0.5 * (len(layers) - 1)) * layer_sep/lattice_c

		lattice = d.pop('lattice')
		lattice = [row + [0.0] for row in lattice]
		lattice = [[lattice_a * x for x in row] for row in lattice]
		lattice.append([0.0, 0.0, lattice_c])

		if d:
			parser.error('Unknown key in input file: {!r}'.format(d.popitem()[0]))

		return lattice, layers

	full_lattice, layers = read_params()
	title = args.title

	def canonicalize_layers(): # IIFE
		for layer in layers:
			# fractional layer lattice (C^-1) is more convenient
			x, units = layer.pop('lattice')
			x = np.array(x)
			if units is CART_UNITS:
				x = x @ np.linalg.inv(full_lattice)
			layer['lattice'] = x

			# so are fractional sites
			x, units = layer.pop('sites')
			x = np.array(x)
			assert x.ndim == 2, 'frac-sites/cart-sites should be a list of 2-vectors'
			assert x.shape[1] == 2, 'frac-sites/cart-sites should be a list of 2-vectors'
			if units is CART_UNITS:
				# mul by A^-1 = (C^-1 S)^-1
				x = x @ np.linalg.inv(layer['lattice'] @ full_lattice)
				parser.error('cart-sites not currently supported')
			layer['sites'] = x

	canonicalize_layers()

	def all_frac_positions(): # IIFE
		all_sites = []
		for layer in layers:
			# unique sites in units of layer lattice
			sites = np.array(layer['sites'])
			# all images in units of layer lattice
			sites = np.vstack([
				sites + ij + layer['shift']
				for ij in itertools.product(*map(range, layer['repeat']))
			])
			# all images in units of full lattice
			sites = sites @ layer['lattice'] @ np.array(layer['transform']).T
			sites %= 1

			# add z column
			sites = sites @ [[1,0,0],[0,1,0]]
			sites += [0.0, 0.0, layer['frac-z']]
			all_sites.append(sites)

		return np.vstack(all_sites)

	fracs = all_frac_positions()
	fracs = [[float(x) for x in row] for row in fracs] # de-numpyify

	if args.xyz:
		write_xyz(print, title, fracs, full_lattice)
	else:
		write_poscar(print, title, fracs, full_lattice)

def write_poscar(print, title, positions, lattice):
	print(title)
	print('1.0')
	for row in lattice:
		print(' ', *row)

	print('C')
	print(len(positions))
	print('Direct')

	for pos in positions:
		print(*pos, 'C')

def write_xyz(print, title, positions, lattice):
	positions = np.array(list(map(list, positions)))
	positions = positions @ list(map(list, lattice))
	print(positions.shape[0])
	print(title)
	for pos in positions:
		print('C', *pos)

main()

